#include <esp8266.h>
#de
fine echoPin 1 // attach pin GPIO-1 Aries to pin Echo of HC-SR04
#de
fine trigPin 0 //attach pin GPIO-0 Aries to pin Trig of HC-SR04
int sensor = 2;
ESP8266Class esp8266(1);
char * AP="realme 7"; // Add network name her
e
char * PASS= "ragnarok"; // Add passwor
d
char * HOST="io.adafruit.com";
int PORT=80;
char * KEY="aio_xOpP12w9jdxihsEYsJsbrATBh4JK";   // Replace K
ey her
e
char * URL="/api/v2/Mnishan/feeds/sh/data";  // Add URL of your feed her
e
long duration; // variable for the duration of sound wa
ve tr
a
vel
int distance; // variable for the distance measurement
int countTrueCommand;
int countTimeCommand; 
boolean found = false; 
int valSensor = 1;
char atcommand[250]={0,};
char data[250]={0,};
char payload[250]={0,};
int timeout=3;
int val = digitalRead(sensor);
int getSensorData(){
  
  // Displays the distance on the Serial Monitor
  int distance1= measureDistance();
  delay(1000);
  int distance2= measureDistance();
  delay(1000);
  delay(100);
  int error= abs(distance2-distance1);
  Serial.print("error= ");
  Serial.println(error);
  Serial.print("pir=");
  Serial.println(val);
  Serial.print("VEGA");
  Serial.println(digitalRead(10));
  Serial.print("TOUCH");
  Serial.println(digitalRead(11));
  if ((val == LOW &&error>10)||digitalRead(10)==HIGH ||digitalRead(11)==HIGH) {
    digitalWrite(22, LOW);   // if motion detected turn (Green LED -> ON) and (Red LED -> OFF)
    digitalWrite(23, LOW);
    digitalWrite(24, LOW);
    return 1;
  } 
   else {
    digitalWrite(22, HIGH);   // if motion detected turn (Green LED -> ON) and (Red LED -> OFF)
    digitalWrite(23, HIGH);
    digitalWrite(24, HIGH);
    return 0;
    }
    
}
int measureDistance(){
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2;
  delay(100);
  return distance;
}
void sendCommand(char * command, int maxTime, char readReplay[]) {
  Serial.print(countTrueCommand);
  Serial.print(". at command => ");
  Serial.print(command);
  Serial.print(" ");
  while(countTimeCommand < (maxTime*1))
  { 
    esp8266.println(command);//at+cipsend   
    if(esp8266.find(readReplay))//ok
    {
      found = true;
      break;
    }  
    countTimeCommand++;
  }  
  if(found == true)
  {
    Serial.println("-> OK");
    countTrueCommand++;
    countTimeCommand = 0;
  }  
  if(found == false)
  {
    Serial.println("-> Fail");
    countTrueCommand = 0;
    countTimeCommand = 0;
  } 
  found = false;
 }
void setup() {
  
  delay(2000);
  countTrueCommand=0;
  countTimeCommand=0;
  Serial.begin(115200);
  esp8266.begin(115200);
  sendCommand("AT",5,"OK");  // the basic command that tests the AT start up. If the AT start up is successful, then the response is OK.
  sendCommand("AT+CWMODE=1",5,"OK");  // to set the WiFi Mode of operation (1 = Station mode i.e ESP connects to the router as a client.)
  memset(atcommand,0,250);
  sprintf(atcommand,"AT+CWJAP=\"%s\",\"%s\"",AP,PASS);   // This command is to connect to an Access Point (like a router).
  sendCommand(atcommand,2,"OK");
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT);
  pinMode(22, OUTPUT);// Sets the echoPin as an INPUT
  pinMode(23, OUTPUT);
  pinMode(24, OUTPUT);
  pinMode(10,INPUT);
  pinMode(11,INPUT);
  pinMode(sensor, INPUT);
}
void loop() { 
  sendCommand("AT+CIPMUX=1",3,"OK");  // This AT Command is used to enable or disable multiple TCP Connections. (0: Single connection, 1: Multiple connections)
  memset(atcommand,0,250);
  sprintf(atcommand,"AT+CIPSTART=0,\"TCP\",\"%s\",%d", HOST, PORT);    // to establish one of the three connections: TCP, UDP or SSL. 
  sendCommand(atcommand,3,"OK");
  memset(atcommand,0,250);
   memset(data,0,250);
  sprintf(data,"{\"value\": %d}",getSensorData());
  sprintf(payload,"POST %s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nX-AIO-Key: %s\r\nContent-Length: %d\r\n\r\n%s",URL, HOST, KEY, strlen(data),data);
  sprintf(atcommand,"AT+CIPSEND=0,%d",strlen(payload));  //  to start sending data in transparent transmission mode.
  sendCommand(atcommand,4,">");
  esp8266.println(payload);
  countTrueCommand++;
  delay(2000);
  sendCommand("AT+CIPCLOSE=0",5,"OK");  // Closes TCP/UDP/SSL connection 
}
