#include <esp8266.h>
#include <Servo.h>
#include <Wire.h>
#include <Adafruit_BMP085.h>
#define seaLevelPressure_hPa 1013.25
#define LEDPIN  24 // Green LED is internally connected to GPIO-22 
#define LDRPIN  A0 // analog pin 0
#define OUT  10

Adafruit_BMP085 bmp;
  TwoWire Wire(1);
#define CH 0 // connect signal PIN to PWM-0 of Aries Board
Servo myservo;  // create servo object to control a servo
ESP8266Class esp8266(1);

char * AP="GalaxyM32E8AC";    // Add network name here
char * PASS= "12345678";     // Add password
char * HOST="io.adafruit.com";
int PORT=80;
char * URL="/api/v2/nxvu/feeds/esp8266/data/last?x-aio-key=aio_vREi40gc8ps7qLYwDmz30VzsgW4a";  // Add URL of your feeds along with key

int countTrueCommand;
int countTimeCommand; 
boolean found = false; 
boolean ledon = false; 
int valSensor = 1;
char atcommand[250]={0,};
char data[250]={0,};


int i=0;
void sendCommand(char * command, int maxTime, char readReplay[]) {
  Serial.print(countTrueCommand);
  Serial.print(". at command => ");
  Serial.print(command);
  Serial.print(" ");
  while(countTimeCommand < (maxTime*1))
  { 
    esp8266.println(command);//at+cipsend
   
    if(esp8266.find(readReplay))//ok
    {
      found = true;
      break;
    }
  
    countTimeCommand++;
  }
  
  if(found == true)
  {
    Serial.println("-> OK");
    countTrueCommand++;
    countTimeCommand = 0;
  }
  
  if(found == false)
  {
    Serial.println("-> Fail");
    countTrueCommand = 0;
    countTimeCommand = 0;
  }
 
  found = false;
 }
int checkButtonStatus()
 {
    int i=500;
    while(i){
       while(esp8266.available())
       {
          Serial.print(char(esp8266.read()));
       }
       i--;
    }
 }


void setup() {
myservo.attach(CH);  // attaches the servo on PWM Channel
Serial.begin(115200);
pinMode(LEDPIN, OUTPUT); // Here LED is determined as an ouput or an indicator.
pinMode(LDRPIN, INPUT); // Here LDR sensor is determined as input.
pinMode(OUT,OUTPUT);
 delay(2000);
  countTrueCommand=0;
  countTimeCommand=0;
  esp8266.begin(115200);
  sendCommand("AT",5,"OK");          // the basic command that tests the AT start up. If the AT start up is successful, then the response is OK.
  sendCommand("AT+CWMODE=1",5,"OK");  // to set the WiFi Mode of operation (1 = Station mode i.e ESP connects to the router as a client.)
  memset(atcommand,0,250);
  sprintf(atcommand,"AT+CWJAP=\"%s\",\"%s\"",AP,PASS);  // This command is to connect to an Access Point (like a router).
  sendCommand(atcommand,2,"OK");
  ledon=false;
if (!bmp.begin()) {
Serial.println("Could not find a valid BMP085 sensor, check wiring!");
while (1) {}
}
}
int flag=0;
int timeout=3;
void loop() { 
 sendCommand("AT+CIPMUX=1",3,"OK");  // This AT Command is used to enable or disable multiple TCP Connections. (0: Single connection, 1: Multiple connections)
  memset(atcommand,0,250);
  sprintf(atcommand,"AT+CIPSTART=0,\"TCP\",\"%s\",%d", HOST, PORT);   // to establish one of the three connections: TCP, UDP or SSL. 
  sendCommand(atcommand,3,"OK");
  memset(atcommand,0,250);
  sprintf(data,"GET %s HTTP/1.1\r\nHost: %s\r\n\r\n", URL, HOST);
  sprintf(atcommand,"AT+CIPSEND=0,%d",strlen(data));                  //  to start sending data in transparent transmission mode.
  sendCommand(atcommand,4,">");
  esp8266.println(data);
  countTrueCommand++; 
    
  timeout=2;
  while(timeout)
  { 
    if(esp8266.find("\"value\":\"1\""))
    {
        Serial.println("LED ON>>>>>>>>>");
        ledon=true;
        break;  
    }  
    else if(esp8266.find("\"value\":\"0\""))
    {
        Serial.println("LED OFF>>>>>>>>>");
        ledon=false;  
        break;
    }
    
    //Serial.println(timeout);
    timeout--;   
  }  
  
  if(ledon){
    digitalWrite(21,LOW);
   
  }
  else{
    digitalWrite(21,HIGH);
    
  }
  
  sendCommand("AT+CIPCLOSE=0",5,"OK"); 
// Void loop is ran again and again and contains main code.
int ldrStatus = analogRead(LDRPIN);  // resitance value // higher the light intensity, lower the resistance

if (bmp.readTemperature()>29) 
{i=1;} 
if(ldrStatus <= 300)
{i=1;}

if(i==1)
{digitalWrite(LEDPIN, LOW); // If LDR senses darkness led pin high that means led will glow.
digitalWrite(OUT,HIGH);
Serial.println("high");
myservo.write(0);
delay(3000);
}

if(i==0)
{myservo.write(180);}
i=0;
digitalWrite(LEDPIN,HIGH);
digitalWrite(OUT,LOW);
Serial.println("low");
Serial.println(bmp.readTemperature());
Serial.println(ldrStatus);

}
